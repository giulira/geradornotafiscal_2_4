package br.com.itau.geradornotafiscal.service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Service;

import br.com.itau.geradornotafiscal.model.Destinatario;
import br.com.itau.geradornotafiscal.model.Endereco;
import br.com.itau.geradornotafiscal.model.Finalidade;
import br.com.itau.geradornotafiscal.model.ItemNotaFiscal;
import br.com.itau.geradornotafiscal.model.NotaFiscal;
import br.com.itau.geradornotafiscal.model.Pedido;
import br.com.itau.geradornotafiscal.model.Regiao;
import br.com.itau.geradornotafiscal.model.RegimeTributacaoPJ;
import br.com.itau.geradornotafiscal.model.TipoPessoa;
import br.com.itau.geradornotafiscal.service.integracoes.RegistroService;

@Service
public class GeradorNotaFiscalService{
	
	public NotaFiscal gerarNotaFiscal(Pedido pedido) {

		Destinatario destinatario = pedido.getDestinatario();
		TipoPessoa tipoPessoa = destinatario.getTipoPessoa();
		List<ItemNotaFiscal> itemNotaFiscalList = new ArrayList<>();

		if (tipoPessoa == TipoPessoa.FISICA) {
		
			CalcularAliquotaBase calculoAliquotaBasePF = new CalcularAliquotaBasePessoaFisica();
			itemNotaFiscalList = calculoAliquotaBasePF.calcularAlicotaProduto(pedido);
			
		} else if (tipoPessoa == TipoPessoa.JURIDICA) {

			RegimeTributacaoPJ regimeTributacao = destinatario.getRegimeTributacao();

			if (regimeTributacao == RegimeTributacaoPJ.SIMPLES_NACIONAL) {
			
				CalcularAliquotaBase calculoAliquotaBasePJSimplesNacional = new CalcularAliquotaPJSimplesNacional();
				itemNotaFiscalList = calculoAliquotaBasePJSimplesNacional.calcularAlicotaProduto(pedido);
				
			} else if (regimeTributacao == RegimeTributacaoPJ.LUCRO_REAL) {
								
				CalcularAliquotaBase calculoAliquotaBasePJLucroReal = new CalcularAliquotaPJLucroReal();
				itemNotaFiscalList = calculoAliquotaBasePJLucroReal.calcularAlicotaProduto(pedido);
			
			} else if (regimeTributacao == RegimeTributacaoPJ.LUCRO_PRESUMIDO) {
							
				CalcularAliquotaBase calculoAliquotaBasePJLucroPresumido = new CalcularAliquotaPJLucroPresumido();
				itemNotaFiscalList = calculoAliquotaBasePJLucroPresumido.calcularAlicotaProduto(pedido);
			}
		}
	
		Regiao regiao = buscarRegiao(pedido);
			
		BigDecimal valorFreteComPercentual = regiao.calcularFreteComPercentual(regiao, pedido);
		

		EmitirNotaFiscal emitirNotaFiscal = new EmitirNotaFiscal();
		NotaFiscal notaFiscal = emitirNotaFiscal.emitirNotaFiscal(pedido, valorFreteComPercentual, itemNotaFiscalList);
		
		new EstoqueService().enviarNotaFiscalParaBaixaEstoque(notaFiscal);
		new RegistroService().registrarNotaFiscal(notaFiscal);
		new EntregaService().agendarEntrega(notaFiscal);
		new FinanceiroService().enviarNotaFiscalParaContasReceber(notaFiscal);

		return notaFiscal;
	}
	
	private Regiao buscarRegiao(Pedido pedido) {
		Regiao regiao = pedido.getDestinatario().getEnderecos().stream()
				.filter(endereco -> endereco.getFinalidade() == Finalidade.ENTREGA || endereco.getFinalidade() == Finalidade.COBRANCA_ENTREGA)
				.map(Endereco::getRegiao)
				.findFirst()
				.orElse(null);
		
		return regiao;
	}
}