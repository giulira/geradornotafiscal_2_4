package br.com.itau.geradornotafiscal.service;

import java.math.BigDecimal;
import java.util.List;

import br.com.itau.geradornotafiscal.model.ItemNotaFiscal;
import br.com.itau.geradornotafiscal.model.Pedido;

public class CalcularAliquotaPJLucroReal extends CalcularAliquotaBase{

	@Override
	public List<ItemNotaFiscal> calcularAlicotaProduto(Pedido pedido) {
		
		BigDecimal valorTotalItens = pedido.getValorTotalItens();
		BigDecimal aliquota;

	/*	if (valorTotalItens < 1000) {
			aliquota = 0.03;
		} else if (valorTotalItens <= 2000) {
			aliquota = 0.09;
		} else if (valorTotalItens <= 5000) {
			aliquota = 0.15;
		} else {
			aliquota = 0.20;
		} */
		
		if (valorTotalItens.compareTo(new BigDecimal(999))  != 1) {
			aliquota = BigDecimal.valueOf(0.03);
		} else if (valorTotalItens.compareTo(new BigDecimal(2000))  != 1) {
			aliquota = BigDecimal.valueOf(0.09);
		} else if (valorTotalItens.compareTo(new BigDecimal(5000))  != 1) {
			aliquota = BigDecimal.valueOf(0.15);
		} else {
			aliquota = BigDecimal.valueOf(0.20);
		}
		
		return calcularAliquota(pedido.getItens(),aliquota);
		
	}
	
	public static void main(String[] args) {
		BigDecimal valorTotalItens = BigDecimal.valueOf(1000);
		BigDecimal aliquota;

		if (valorTotalItens.compareTo(new BigDecimal(999))  != 1) {
			aliquota = BigDecimal.valueOf(0.03);
		} else if (valorTotalItens.compareTo(new BigDecimal(2000))  != 1) {
			aliquota = BigDecimal.valueOf(0.09);
		} else if (valorTotalItens.compareTo(new BigDecimal(5000))  != 1) {
			aliquota = BigDecimal.valueOf(0.15);
		} else {
			aliquota = BigDecimal.valueOf(0.20);
		}
		
		System.out.println("valorTotalItens "+valorTotalItens + " aliquota "+ aliquota );
		
	}

	
}


